h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste("[nI(", hat(theta), ")", "^", "1/2(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(sqrt("[nI(", hat(theta), ")"), "(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(sqrt("[", nI(hat(theta)), "]"), "(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 1000
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, .1)
hist(lr_stat[1,], breaks = 100, probability = TRUE)
lines(grid, dchisq(grid, df = 1))
hist(lr_stat[2,], breaks = 100, probability = TRUE)
lines(grid, dchisq(grid, df = 1))
n <- 7
S <- 1000
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, .1)
h1 <- density(lr_stat[1,])
h2 <- density(lr_stat[2,])
plot(h2, main = "LR Stats")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
min(lr_stat)
hist(lr_stat[1,])
?density
h1 <- hist(lr_stat[1,])
h2 <- hist(lr_stat[2,])
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,])
h2 <- hist(lr_stat[2,])
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 50)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 50)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 400))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, probability = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, probability = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, freq = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, freq = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350), freq = FALSE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE, freq = FALSE)
lines(grid, dchisq(grid, df = 1))
?hist
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = FALSE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350), probability = FALSE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = FALSE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
dchisq(0)
dchisq(0, df = 1)
dchisq(0.1, df = 1)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2), main = "Simulation")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 500
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 1, diag(2))
rWishart(1, 4, diag(2))
rWishart(1, 4, diag(2))
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 3, diag(2))
b
b[, 1, 1]
b[1, 1, ]
b <- rWishart(1000, 2, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 4, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 3, diag(2))
summary(a)
summary(b)
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 2.5, diag(2))
summary(a)
summary(b)
a <- rgamma(1000, 2, 2)
b <- rWishart(1000, 1.5, diag(2))
summary(a)
summary(b)
b <- rWishart(1000, 1, diag(2))
b <- rWishart(1000, 2, diag(2))
summary(a)
summary(b)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75) sgn = 2*rbinom(d,1,0.5) - 1
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75)
sgn <- 2*rbinom(d,1,0.5) - 1
betastar <- betastarm*sgn
X <- matrix(rnorm(n*d),nrow=n)
X[,3] <- sqrt(0.98)*X[,1] + sqrt(0.02)*X[,3] X[,4] = sqrt(0.95)*X[,1] +
set.seed(1287)
n <- 100
d <- 7
betastarm <- runif(d,min=0.25,max=1.75)
sgn <- 2*rbinom(d,1,0.5) - 1
betastar <- betastarm*sgn
X <- matrix(rnorm(n*d),nrow=n)
X[,3] <- sqrt(0.98)*X[,1] + sqrt(0.02)*X[,3]
X[,4] <- sqrt(0.95)*X[,1] + sqrt(0.05)*X[,4]
mustar <- X %*% betastar
sigstar <- 1.50
y <- mustar + sigstar * rt(n, df = 4)
betastarm
invgamma
library(invgamma)
X
betastar
rgamma(3, 1:3, 1:3)
rgamma(3, 1:3, 1:3)
rgamma(3, c(1, 10, 100), 1:3)
rgamma(3, c(1, 10, 100), 1:3)
rgamma(3, 1:3, 1:3)
shape
rate
rgamma(3, 1:3, 1)
rgamma(3, c(1, 10, 100), 1)
rgamma(3, c(1, 10, 100), 1)
a <- 2; b <- 2
library(mvtnorm)
y_lik <- function(xi, tau) {
M <- (X %*% t(X) / xi) + diag(1 / tau)
det(M) ^ (- 1 / 2) * ((b + t(y) %*% solve(M) %*% y) / 2) ^ (- (n + a) / 2)
}
sigma_xi <- 1
a <- 2; b <- 2
beta_samples <- matrix(NA, nrow = S, ncol = d)
S <- 10000
B <- 1000
a <- 2; b <- 2
beta_samples <- matrix(NA, nrow = S, ncol = d)
sigma_samples <- rep(NA, S)
xi_samples <- rep(NA, S)
tau_samples <- matrix(NA, nrow = S, ncol = n)
beta_samples[1, ] <- rep(1, d)
sigma_samples[1] <- 1
xi_samples[1] <- 1
tau_samples[1, ] <- rep(1, n)
y_lik <- function(xi, tau) {
M <- (X %*% t(X) / xi) + diag(1 / tau)
det(M) ^ (- 1 / 2) * ((b + t(y) %*% solve(M) %*% y) / 2) ^ (- (n + a) / 2)
}
sigma_xi <- 1
k <- 2
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
beta_samples[k - 1, ]
y - X %*% beta_samples[k - 1, ]
4 * sigma_samples[k]
sigma_samples[k]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k])
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
rate
4 * sigma_samples[k - 1]
rate <- (y - X %*% beta_samples[k - 1, ] + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
2 + 4 * sigma_samples[k - 1]) /
rate <- ((y - X %*% beta_samples[k - 1, ]) ^ 2 + 4 * sigma_samples[k - 1]) /
(2 * sigma_samples[k - 1])
rate
tau_samples[k, ] <- rgamma(n, 5 / 2 , rate)
tau_samples[k,]
rate <- tau_samples[k, ] %*% (y - X %*% beta_samples[k - 1, ]) +
xi_samples[k - 1] * (beta_samples[k - 1, ] %*% beta_samples[k - 1, ]) + b
rate
library(installR)
library(updateR)
updateR::updateR("D@3dalus")
version
setwd("~/Documents/network_embedding/network_embedding")
git branch
knitr::opts_chunk$set(echo = TRUE)
source("reporting_tools.R")
install.packages("tidyverse")
library(clipr)
library(ggplot2)
library(ggrepel)
load(file = "perf_data/blog.Rda")
install.packages("ggrepel")
install.packages("cowplot")
bg_compare_dat <-
rbind(
perf_as_df(rowMeans(bg_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(bg_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_BlogCatalog", "LINE_BlogCatalog",
# "nopenalty_BlogCatalog", "rns_015_BlogCatalog")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Blog Catalog",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
source("reporting_tools.R")
bg_compare_dat <-
rbind(
perf_as_df(rowMeans(bg_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(bg_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_BlogCatalog", "LINE_BlogCatalog",
# "nopenalty_BlogCatalog", "rns_015_BlogCatalog")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Blog Catalog",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
bg_compare_dat %>%
filter(measure == "Micro-F1" & Type == "t1_embed") %>%
ggplot(aes(x = Labeled, y = Score, color = Method)) +
geom_path() + geom_point() +
theme_minimal() +
theme(legend.position = "bottom")
bg_rns_best <- bg_compare_dat %>%
filter(Labeled == 0.8, Type == "t2_embed", measure == "Micro-F1",
Method == "rns") %>%
filter(Score == max(Score))
bg_ns_best <- bg_compare_dat %>%
filter(Labeled == 0.8, Type == "t2_embed", measure == "Micro-F1",
Method == "LINE") %>%
filter(Score == max(Score))
bg_rns_best
bg_ns_best
(bg_rns_best$Score / bg_ns_best$Score) - 1
load(file = "perf_data/wiki.Rda")
load(file = "perf_data/flickr.Rda")
compare_dat <- rbind(flickr_compare_dat, bg_compare_dat, #ppi_compare_dat,
wiki_compare_dat) %>%
mutate(Method = str_replace_all(Method,
c("kkk" = "NN-NS",
"LINE" = "NS",
"rns" = "RNS",
"nopenalty" = "RNS No Penalty")))
flickr_compare_dat <-
rbind(
perf_as_df(rowMeans(flickr_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(flickr_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_flickr", "true_line_flickr",
#                      "nopenalty_flickr", "rns_008_flickr")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Flickr",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace_all(Method, "_flickr|_\\d{2,4}|true_", "") %>%
str_replace("line", "LINE"))
compare_dat <- rbind(flickr_compare_dat, bg_compare_dat, #ppi_compare_dat,
wiki_compare_dat) %>%
mutate(Method = str_replace_all(Method,
c("kkk" = "NN-NS",
"LINE" = "NS",
"rns" = "RNS",
"nopenalty" = "RNS No Penalty")))
wiki_compare_dat <-
rbind(
perf_as_df(rowMeans(wiki_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(wiki_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_POS", "LINE_POS",
#                      "nopenalty_POS", "rns_02_POS")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Wikipedia",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
compare_dat <- rbind(flickr_compare_dat, bg_compare_dat, #ppi_compare_dat,
wiki_compare_dat) %>%
mutate(Method = str_replace_all(Method,
c("kkk" = "NN-NS",
"LINE" = "NS",
"rns" = "RNS",
"nopenalty" = "RNS No Penalty")))
compare_table <- compare_dat %>%
group_by(Method, Type, measure, Labeled, Data) %>%
mutate(is_best = Score == max(Score)) %>%
ungroup() %>%
filter(Labeled == 0.5 & is_best)
View(compare_table)
compare_table %>%
filter(Type == "t1_embed") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
unite(m_data, measure, Data) %>%
spread(key = m_data, value = Score)
compare_table %>%
filter(Type == "t1_embed") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
unite(m_data, measure, Data) %>%
spread(key = m_data, value = Score) %>% View
compare_dat %>%
filter(Type == "t2_embed", measure == "Micro-F1") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
spread(key = Data, value = Score)
compare_table %>%
filter(Type == "t2_embed", measure == "Micro-F1") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
spread(key = Data, value = Score)
compare_dat %>%
filter(Type == "t2_embed", measure == "Macro-F1") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
spread(key = Data, value = Score)
compare_table %>%
filter(Type == "t2_embed", measure == "Macro-F1") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
spread(key = Data, value = Score)
compare_table %>%
filter(Type == "t2_embed", measure == "Micro-F1") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
spread(key = Data, value = Score)
compare_table %>%
filter(Type == "t2_embed", measure == "Macro-F1") %>%
select(-Type, -Split, -Labeled, -is_best) %>%
spread(key = Data, value = Score)
bg_rns_best <- bg_compare_dat %>%
filter(Labeled == 0.5, Type == "t2_embed", measure == "Micro-F1",
Method == "rns") %>%
filter(Score == max(Score))
bg_ns_best <- bg_compare_dat %>%
filter(Labeled == 0.5, Type == "t2_embed", measure == "Micro-F1",
Method == "LINE") %>%
filter(Score == max(Score))
(bg_rns_best$Score / bg_ns_best$Score) - 1

h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(legend = c("Fisher Information", "Observed Fisher Information"))
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topright", legend = c("Fisher Information", "Observed Fisher Information"))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = TRUE)
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
col = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
col = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
col = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4)), fill = TRUE
)
plot_grid <- seq(0, 20, .1)
plot(plot_grid, sapply(plot_grid, function(x) exp(prof_log_lik(x)), type = 'l',
xlab = expression(psi), ylab = "Likelihood",
main = "Profile Likelihood")
)
sat <- data.frame(school = 1:8,
treat = c(28.39, 7.94, -2.75, 6.82, -.64, .63, 18.01, 12.16),
se = c(14.9, 10.2, 16.3, 11, 9.4, 11.4, 10.4, 17.6))
prof_log_lik <- function(psi) {
lambda <- sum(sat$treat / (sat$se ^ 2 + psi)) / sum(1 / (sat$se ^ 2 + psi))
-.5 * sum(log(sat$se ^ 2 + psi) + (sat$treat - lambda) ^ 2 / (sat$se ^ 2 + psi))
}
plot_grid <- seq(0, 20, .1)
plot(plot_grid, sapply(plot_grid, function(x) exp(prof_log_lik(x)), type = 'l',
xlab = expression(psi), ylab = "Likelihood",
main = "Profile Likelihood")
)
sat <- data.frame(school = 1:8,
treat = c(28.39, 7.94, -2.75, 6.82, -.64, .63, 18.01, 12.16),
se = c(14.9, 10.2, 16.3, 11, 9.4, 11.4, 10.4, 17.6))
prof_log_lik <- function(psi) {
lambda <- sum(sat$treat / (sat$se ^ 2 + psi)) / sum(1 / (sat$se ^ 2 + psi))
-.5 * sum(log(sat$se ^ 2 + psi) + (sat$treat - lambda) ^ 2 / (sat$se ^ 2 + psi))
}
plot_grid <- seq(0, 20, .1)
plot(plot_grid, sapply(plot_grid, function(x) exp(prof_log_lik(x))), type = 'l',
xlab = expression(psi), ylab = "Likelihood", main = "Profile Likelihood")
h1 <- hist(samps[1,], breaks = 100)
h2 <- hist(samps[2,], breaks = 100)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(samps[1,], breaks = 50)
h2 <- hist(samps[2,], breaks = 50)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(samps[1,], breaks = 50, plot = FALSE)
h2 <- hist(samps[2,], breaks = 50, plot = FALSE)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), add = TRUE)
h1 <- hist(samps[1,], breaks = 50, plot = FALSE)
h2 <- hist(samps[2,], breaks = 50, plot = FALSE)
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100))
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h1 <- density(samps[1,])
h2 <- density(samps[2,])
100, 100), main = )
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), main = )
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, col = rgb(1, 0, 0, 1/4), xlim = c(-100, 100), main = "foo")
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .02), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .1), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .5), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .41), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "foo")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(hat(theta)))
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(hat(theta))),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste("[nI(", hat(theta), ")", "^", "1/2(", hat(theta, "-", theta, ")"))),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste("[nI(", hat(theta), ")", "^", "1/2(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(sqrt("[nI(", hat(theta), ")"), "(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(sqrt("[", nI(hat(theta)), "]"), "(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 1000
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, .1)
hist(lr_stat[1,], breaks = 100, probability = TRUE)
lines(grid, dchisq(grid, df = 1))
hist(lr_stat[2,], breaks = 100, probability = TRUE)
lines(grid, dchisq(grid, df = 1))
n <- 7
S <- 1000
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, .1)
h1 <- density(lr_stat[1,])
h2 <- density(lr_stat[2,])
plot(h2, main = "LR Stats")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
min(lr_stat)
hist(lr_stat[1,])
?density
h1 <- hist(lr_stat[1,])
h2 <- hist(lr_stat[2,])
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,])
h2 <- hist(lr_stat[2,])
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 50)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 50)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 400))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, probability = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, probability = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, freq = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, freq = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350), freq = FALSE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE, freq = FALSE)
lines(grid, dchisq(grid, df = 1))
?hist
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = FALSE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350), probability = FALSE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = FALSE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
dchisq(0)
dchisq(0, df = 1)
dchisq(0.1, df = 1)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2), main = "Simulation")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 500
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
knitr::opts_chunk$set(echo = TRUE)
source("experiment_tools.R")
setwd("~/Documents/network_embedding/network_embedding")
l2logreg <- makeLearner("classif.LiblineaRL2LogReg", predict.type = "response")
l2logreg_ml <- l2logreg %>%
# makeConstantClassWrapper() %>%
makeMultilabelBinaryRelevanceWrapper()
frac_descs = lapply(seq(.1, .9, .1), function(frac) {
makeResampleDesc(method = "Subsample", stratify = FALSE,
iters = 10, split = frac)
})
ppi_label <- readMat("Protein/Labelppi.mat")
ppi_label_mat <- ppi_label$Label.ppi %>% as.matrix()
ppi_embeds <- lapply(dir(path = "Protein", pattern = "*_ppi",
full.names = TRUE), readMat, USE.NAMES = TRUE)
names(ppi_embeds) <- dir(path = "Protein", pattern = "*_ppi") %>%
gsub(x = ., pattern = ".mat", replacement = "")
colnames(ppi_label_mat) <- paste0("class_", 1:ncol(ppi_label_mat))
ppi_embed_dats <-
lapply(ppi_embeds,
function(x) list(t1_embed = as_embed_df(get_type_k(x, 1),
ppi_label_mat),
t2_embed = as_embed_df(get_type_k(x, 2),
ppi_label_mat))
)
ppi_label_mat
ccolSums(ppi_label_mat)
colSums(ppi_label_mat)
dim(ppi_embeds$LINE_ppi$LINEtypeIppid)
dim(ppi_embeds$LINE_ppi$LINEtypeI)
dim(ppi_embeds$LINE_ppi$LINEtypeIppi
)
keep_classes <- colSums(ppi_label_mat) > 30
sum(keep_classes)
ppi_tasks <- lapply(unlist(ppi_embed_dats, recursive = FALSE), function(embd) {
makeMultilabelTask(data = embd,
target = paste0("class_", 1:ncol(ppi_label_mat)))
}
)
set.seed(13)
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 10)
debugSource('~/Documents/network_embedding/network_embedding/experiment_tools.R')
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 10)
min_case
candidates
sample(candidates, size = min_case)
source('~/Documents/network_embedding/network_embedding/experiment_tools.R')
debugSource('~/Documents/network_embedding/network_embedding/experiment_tools.R')
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 10)
sample_list
split_size
length(starting_sample)
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 1)
split_size
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 2)
split_size
debugSource('~/Documents/network_embedding/network_embedding/experiment_tools.R')
debugSource('~/Documents/network_embedding/network_embedding/experiment_tools.R')
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 5)
ppi_perf$micro_f1
colSums(ppi_label_mat) > 30
colSums(ppi_label_mat) > 50
sum(colSums(ppi_label_mat) > 50)
colSums(ppi_label_mat)
vector("list", 3)
source('~/Documents/network_embedding/network_embedding/experiment_tools.R')
append
?append
append(list(), 3)
append(list(), 4)
source('~/Documents/network_embedding/network_embedding/experiment_tools.R')
ppi_perf <- multilabel_resample(tasks = ppi_tasks, splits = seq(.1, .9, .1),
labels = ppi_label_mat, learner = l2logreg_ml,
iters = 5, min_case = 1)
hws <- c(90 / 94, 1, 31/40, 54 / 58, 23 / 26, 44 / 53, 52 / 61, 32/33, 64/66)
hw_actual <- mean(sort(hws)[-c(1:2)]) * 100
quizzes <- c(75, 100,	50,	100, 75, 75, 75, 75, 100, 75, 0, 100, 0)
quiz_actual <- mean(sort(quizzes)[-c(1:4)])
exams <- c(76, 48)
.15 * hw_actual + .15 * quiz_actual + sum(.2 * exams)
quiz_actual
hw_hypo
.15 * hw_actual + .15 * quiz_actual + sum(.2 * exams) / (15 + 15 + 40)
(.15 * hw_actual + .15 * quiz_actual + sum(.2 * exams)) / (15 + 15 + 40)
source('~/Documents/network_embedding/network_embedding/experiment_tools.R')
ppi_perf$micro_f1

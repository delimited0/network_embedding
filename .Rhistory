fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(sqrt("[nI(", hat(theta), ")"), "(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = expression(paste(sqrt("[", nI(hat(theta)), "]"), "(", hat(theta), "-", theta, ")")),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- density(samps[1,])
h2 <- density(samps[2,])
plot(h2, xlim = c(-100, 100), ylim = c(0, .4), main = "Sampling Distributions")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 1000
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, .1)
hist(lr_stat[1,], breaks = 100, probability = TRUE)
lines(grid, dchisq(grid, df = 1))
hist(lr_stat[2,], breaks = 100, probability = TRUE)
lines(grid, dchisq(grid, df = 1))
n <- 7
S <- 1000
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, .1)
h1 <- density(lr_stat[1,])
h2 <- density(lr_stat[2,])
plot(h2, main = "LR Stats")
polygon(h1, density = -1, col = rgb(0, 0, 1, 1/4))
polygon(h2, density = -1, col = rgb(1, 0, 0, 1/4))
min(lr_stat)
hist(lr_stat[1,])
?density
h1 <- hist(lr_stat[1,])
h2 <- hist(lr_stat[2,])
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,])
h2 <- hist(lr_stat[2,])
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 50)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 50)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 400))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("Fisher Information", "Observed Fisher Information"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, probability = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, probability = TRUE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, freq = FALSE)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100, freq = FALSE)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE)
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350), freq = FALSE)
plot(h2, col = rgb(1, 0, 0, 1/4), add = TRUE, freq = FALSE)
lines(grid, dchisq(grid, df = 1))
?hist
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100, probability = FALSE)
h1 <- hist(lr_stat[1,], plot = FALSE, breaks = 100)
h2 <- hist(lr_stat[2,], plot = FALSE, breaks = 100)
plot(h1, col = rgb(0, 0, 1, 1/4), ylim = c(0, 350), probability = FALSE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = FALSE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE)
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 350))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
dchisq(0)
dchisq(0, df = 1)
dchisq(0.1, df = 1)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topleft",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2))
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2), main = "Simulation")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
n <- 7
S <- 500
lr_stat <- replicate(n = S, {
x <- rnorm(n)
tstat <- sqrt(n) * mean(x) / sd(x)
W <- n * log(1 + tstat ^ 2 / (n - 1))
Wb <- W / (1 + 1.5 / n)
c(W, Wb)
})
grid <- seq(0, 15, 0.01)
h1 <- hist(lr_stat[1,], breaks = 100, probability = TRUE,
col = rgb(0, 0, 1, 1/4), ylim = c(0, 2),
main = "Simulation", xlab = "x")
h2 <- hist(lr_stat[2,], breaks = 100, probability = TRUE, add = TRUE,
col = rgb(1, 0, 0, 1/4))
lines(grid, dchisq(grid, df = 1))
legend(x = "topright",
legend = c("LR Stat", "Bartlett Corrected Stat"),
fill = c(rgb(1, 0, 0, 1/4), rgb(0, 0, 1, 1/4))
)
setwd("~/Documents/network_embedding/network_embedding")
knitr::opts_chunk$set(echo = TRUE)
karate_embeds <- lapply(dir("Karate", full.names = TRUE), readMat)
source("experiment_tools.R")
library(R.matlab)
library(ggplot2)
library(tidyverse)
library(ggrepel)
karate_embeds <- lapply(dir("Karate", full.names = TRUE), readMat)
names(karate_embeds) <- str_replace(dir("Karate"), "\\.mat", "")
karate_I_embed <-
map(names(karate_embeds),
~ data.frame(karate_embeds[[.]]$typeIembed,
method = str_replace(., "Karate", ""),
label = factor(karate_embeds[[.]]$label))) %>%
reduce(rbind) %>%
group_by(method) %>%
mutate(ID = row_number()) %>%
ungroup() %>%
mutate(type = "Type I")
karate_II_embed <-
map(names(karate_embeds),
~ data.frame(karate_embeds[[.]]$typeIIembed,
method = str_replace(., "Karate", ""),
label = factor(karate_embeds[[.]]$label))) %>%
reduce(rbind) %>%
group_by(method) %>%
mutate(ID = row_number()) %>%
ungroup() %>%
mutate(type = "Type II")
karate_context <-
map(names(karate_embeds),
~ data.frame(karate_embeds[[.]]$context,
method = str_replace(., "Karate", ""),
label = factor(karate_embeds[[.]]$label))) %>%
reduce(rbind) %>%
group_by(method) %>%
mutate(ID = row_number()) %>%
ungroup() %>%
mutate(type = "Context")
karate_all_embed <- rbind(karate_I_embed, karate_II_embed, karate_context)
gg_k1 <- karate_I_embed %>%
mutate(important_ID = ifelse(ID %in% c(1, 34), ID, "")) %>%
ggplot(aes(x = X1, y = X2, fill = label)) +
geom_point(color = "black", pch = 21, size = 3, position = "jitter") +
# geom_text_repel(aes(X1, X2, label = ID), force = .5) +
geom_text_repel(aes(label = important_ID), color = "black",
point.padding = 1, min.segment.length = 0) +
# geom_density_2d() +
facet_wrap(~ method, scales = "free") +
theme_bw() +
theme(legend.position = "none", plot.margin=grid::unit(c(0,0,0,0), "mm")) +
labs(title = "Karate Type I Objective", x = NULL, y = NULL)
gg_k1
gg_k2 <- karate_all_embed %>%
filter(type %in% c("Type II", "Context")) %>%
mutate(important_ID = ifelse(ID %in% c(1, 34), ID, "")) %>%
ggplot(aes(x = X1, y = X2, fill = label, shape = type)) +
# ggplot(aes(x = X1, y = X2, color = interaction(label, type))) +
geom_point(size = 3, position = "jitter", color = "black") +
# geom_text(aes(label = important_ID), color = "black", size = 4) +
geom_text_repel(aes(label = important_ID), color = "black",
point.padding = 1, min.segment.length = 0) +
facet_wrap(~ method, scales = "free") +
theme_bw() +
theme(legend.position = c(1, 0), legend.justification = c(1, 0),
plot.margin=grid::unit(c(0,0,0,0), "mm")) +
# theme(legend.position = "bottom") +
# scale_color_manual(name = "",
#                    labels = c("Group A Context", "Group B Context",
#                               "Group A Embedding", "Group B Embedding"),
#                    values = c("turquoise", "red", "cyan", "pink")) +
scale_shape_manual(name = "Vector Type",
labels = c("Context", "Embedding"),
values = c(21, 25)) +
guides(color = FALSE, fill = FALSE) +
labs(title = "Karate Type II Objective", x = NULL, y = NULL)
gg_k2
ggsave("karate_I_embed.pdf", plot = gg_k1, device = "pdf", path = "plots")
ggsave("karate_II_embed.pdf", plot = gg_k2, device = "pdf", path = "plots")
knitr::opts_chunk$set(echo = TRUE)
load(file = "perf_data/blog.Rda")
bg_compare_dat <-
rbind(
perf_as_df(rowMeans(bg_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(bg_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_BlogCatalog", "LINE_BlogCatalog",
# "nopenalty_BlogCatalog", "rns_015_BlogCatalog")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Blog Catalog",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
source("reporting_tools.R")
bg_compare_dat <-
rbind(
perf_as_df(rowMeans(bg_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(bg_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_BlogCatalog", "LINE_BlogCatalog",
# "nopenalty_BlogCatalog", "rns_015_BlogCatalog")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Blog Catalog",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
load(file = "perf_data/wiki.Rda")
wiki_compare_dat <-
rbind(
perf_as_df(rowMeans(wiki_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(wiki_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_POS", "LINE_POS",
#                      "nopenalty_POS", "rns_02_POS")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Wikipedia",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
load(file = "perf_data/ppi.Rda")
ppi_compare_dat <-
rbind(
perf_as_df(rowMeans(ppi_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(ppi_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_ppi", "LINE_ppi",
#                      "nopenalty_ppi", "rns_015_ppi")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "PPI (Homo Sapiens)",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace(Method, "_.*", ""))
load(file = "perf_data/flickr.Rda")
flickr_compare_dat <-
rbind(
perf_as_df(rowMeans(flickr_perf$micro_f1, FALSE, 2), "Micro-F1"),
perf_as_df(rowMeans(flickr_perf$macro_f1, FALSE, 2), "Macro-F1")
) %>%
# filter(Method %in% c("kkk_flickr", "true_line_flickr",
#                      "nopenalty_flickr", "rns_008_flickr")) %>%
gather(key = "Split", value = "Score", -Method, -Type, -measure) %>%
mutate(Labeled = as.numeric(str_replace(Split, "split_", "")),
Data = "Flickr",
Penalty = str_extract(Method, "\\d{2,4}") %>%
paste0(".", .) %>%
as.numeric(),
Method = str_replace_all(Method, "_flickr|_\\d{2,4}|true_", "") %>%
str_replace("line", "LINE"))
compare_dat <- rbind(flickr_compare_dat, bg_compare_dat,
ppi_compare_dat, wiki_compare_dat)
tune_typeI <- compare_dat %>%
filter(Method %in% c("LINE", "rns"), Labeled == 0.5) %>%
filter(Type == "t1_embed") %>%
group_by(Data, measure) %>%
mutate(LINE_Score = Score[Method == "LINE"]) %>%
ggplot(aes(x = Penalty, y = Score)) +
facet_wrap(measure ~ Data, scales = "free", nrow = 2) +
geom_path() + geom_point() +
geom_line(aes(x = Penalty, y = LINE_Score)) +
theme_bw() +
theme(legend.position = "bottom", legend.text = element_text(size = 12)) +
labs(title = "Type I Objective")
tune_typeI
gg_k1
gg_k1
gg_k1 <- karate_I_embed %>%
mutate(important_ID = ifelse(ID %in% c(1, 34), ID, "")) %>%
ggplot(aes(x = X1, y = X2, fill = label)) +
geom_point(color = "black", pch = 21, size = 5, position = "jitter") +
# geom_text_repel(aes(X1, X2, label = ID), force = .5) +
geom_text_repel(aes(label = important_ID), color = "black",
point.padding = 1, min.segment.length = 0) +
# geom_density_2d() +
facet_wrap(~ method, scales = "free") +
theme_bw() +
theme(legend.position = "none", plot.margin=grid::unit(c(0,0,0,0), "mm")) +
labs(title = "Karate Type I Objective", x = NULL, y = NULL)
gg_k1
gg_k2 <- karate_all_embed %>%
filter(type %in% c("Type II", "Context")) %>%
mutate(important_ID = ifelse(ID %in% c(1, 34), ID, "")) %>%
ggplot(aes(x = X1, y = X2, fill = label, shape = type)) +
# ggplot(aes(x = X1, y = X2, color = interaction(label, type))) +
geom_point(size = 5, position = "jitter", color = "black") +
# geom_text(aes(label = important_ID), color = "black", size = 4) +
geom_text_repel(aes(label = important_ID), color = "black",
point.padding = 1, min.segment.length = 0) +
facet_wrap(~ method, scales = "free") +
theme_bw() +
theme(legend.position = c(1, 0), legend.justification = c(1, 0),
plot.margin=grid::unit(c(0,0,0,0), "mm")) +
# theme(legend.position = "bottom") +
# scale_color_manual(name = "",
#                    labels = c("Group A Context", "Group B Context",
#                               "Group A Embedding", "Group B Embedding"),
#                    values = c("turquoise", "red", "cyan", "pink")) +
scale_shape_manual(name = "Vector Type",
labels = c("Context", "Embedding"),
values = c(21, 25)) +
guides(color = FALSE, fill = FALSE) +
labs(title = "Karate Type II Objective", x = NULL, y = NULL)
gg_k2
ggsave("karate_I_embed.pdf", plot = gg_k1, device = "pdf", path = "plots")
ggsave("karate_II_embed.pdf", plot = gg_k2, device = "pdf", path = "plots")
tune_typeI <- compare_dat %>%
filter(Method %in% c("LINE", "rns"), Labeled == 0.5) %>%
filter(Type == "t1_embed") %>%
group_by(Data, measure) %>%
mutate(LINE_Score = Score[Method == "LINE"]) %>%
ggplot(aes(x = Penalty, y = Score)) +
facet_wrap(measure ~ Data, scales = "free", nrow = 2) +
geom_path() + geom_point() +
geom_line(aes(x = Penalty, y = LINE_Score)) +
theme_bw() +
theme(legend.position = "bottom", legend.text = element_text(size = 12)) +
labs(title = "Type I Objective")
tune_typeI
tune_typeI <- compare_dat %>%
filter(Method %in% c("LINE", "rns"), Labeled == 0.5) %>%
filter(Type == "t1_embed") %>%
group_by(Data, measure) %>%
mutate(LINE_Score = Score[Method == "LINE"]) %>%
ggplot(aes(x = Penalty, y = Score)) +
facet_wrap(measure ~ Data, scales = "free", nrow = 2) +
geom_path() + geom_point() +
geom_line(aes(x = Penalty, y = LINE_Score)) +
annotate("text", x = min(Penalty), y = LINE_Score, label = "NS") +
theme_bw() +
theme(legend.position = "bottom", legend.text = element_text(size = 12)) +
labs(title = "Type I Objective")
?annotate
tune_typeI <- compare_dat %>%
filter(Method %in% c("LINE", "rns"), Labeled == 0.5) %>%
filter(Type == "t1_embed") %>%
group_by(Data, measure) %>%
mutate(LINE_Score = Score[Method == "LINE"]) %>%
ggplot(aes(x = Penalty, y = Score)) +
facet_wrap(measure ~ Data, scales = "free", nrow = 2) +
geom_path() + geom_point() +
geom_line(aes(x = Penalty, y = LINE_Score), show.legend = TRUE) +
theme_bw() +
theme(legend.position = "bottom", legend.text = element_text(size = 12)) +
labs(title = "Type I Objective")
tune_typeI
ggsave("tune_typeI.pdf", plot = tune_typeI, device = "pdf", path = "plots")
ggsave("tune_typeII.pdf", plot = tune_typeII, device = "pdf", path = "plots")
tune_typeI <- compare_dat %>%
filter(Method %in% c("LINE", "rns"), Labeled == 0.5) %>%
filter(Type == "t1_embed") %>%
group_by(Data, measure) %>%
mutate(LINE_Score = Score[Method == "LINE"]) %>%
ggplot(aes(x = Penalty, y = Score)) +
facet_wrap(measure ~ Data, scales = "free", nrow = 2) +
geom_path() + geom_point() +
geom_line(aes(x = Penalty, y = LINE_Score)) +
theme_bw() +
theme(legend.position = "bottom", legend.text = element_text(size = 12)) +
labs(title = "Type I Objective")
tune_typeII <- compare_dat %>%
filter(Method %in% c("LINE", "rns"), Labeled == 0.5) %>%
filter(Type == "t2_embed") %>%
group_by(Data, measure) %>%
mutate(LINE_Score = Score[Method == "LINE"]) %>%
ggplot(aes(x = Penalty, y = Score)) +
facet_wrap(measure ~ Data, scales = "free", nrow = 2) +
geom_path() + geom_point() +
geom_line(aes(x = Penalty, y = LINE_Score)) +
theme_bw() +
theme(legend.position = "bottom", legend.text = element_text(size = 12)) +
labs(title = "Type II Objective")
ggsave("tune_typeI.pdf", plot = tune_typeI, device = "pdf", path = "plots")
ggsave("tune_typeII.pdf", plot = tune_typeII, device = "pdf", path = "plots")
knitr::opts_chunk$set(echo = TRUE)
ppi_label <- readMat("Protein/Labelppi.mat")
ppi_label_mat <- ppi_label$Label.ppi %>% as.matrix()
View(ppi_label_mat)
ppi_label_mat
table(ppi_label_mat)
table(ppi_label)
ppi_label$network
ppi_label$group
colSums(ppi_label_mat)
View(ppi_compare_dat)
